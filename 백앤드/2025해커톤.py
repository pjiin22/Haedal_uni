# -*- coding: utf-8 -*-
"""2025해커톤.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EmF_bUTRKAQYFI19VxKnGijSfvbAFSbI

# 라이브러리 설치
"""

!pip install fastapi uvicorn nest-asyncio pyngrok

!apt install tesseract-ocr

!pip install pytesseract pillow fastapi uvicorn nest-asyncio pyngrok

!pip install python-jose[cryptography]

!pip install python-multipart

!pip install python-dotenv

from fastapi import FastAPI
from fastapi import HTTPException, Depends, Header
from fastapi.openapi.utils import get_openapi
from fastapi.openapi.models import APIKey, APIKeyIn, SecuritySchemeType
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi import UploadFile, File
from fastapi.responses import JSONResponse
from fastapi import Depends

from jose import JWTError
from jose import  jwt

from dotenv import load_dotenv

import os

from pydantic import BaseModel

from datetime import datetime, timedelta
security = HTTPBearer()

import sqlite3

import shutil

import os
from fastapi import FastAPI, UploadFile, File, Form #사진

from PIL import Image
import pytesseract

from io import BytesIO

from typing import Optional

from PIL import Image

import pytesseract

from io import BytesIO
import sqlite3

app = FastAPI()

"""# JMT 함수"""

with open(".env", "w") as f:
    f.write("SECRET_KEY=my-super-secret-key")

#임의로 ㄱ

load_dotenv()

SECRET_KEY = os.getenv("SECRET_KEY")
ALGORITHM = "HS256"

print(SECRET_KEY)

def decode_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload.get("sub")
    except JWTError:
        raise HTTPException(status_code=401, detail="토큰이 유효하지 않습니다.")

"""# 보안"""

from fastapi.openapi.utils import get_openapi

def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema

    openapi_schema = get_openapi(
        title="빈강의실 관리 시스템",
        version="1.0.0",
        description="JWT 인증 포함 Swagger 문서",
        routes=app.routes,
    )
    openapi_schema["components"]["securitySchemes"] = {
        "BearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
        }
    }
    for path in openapi_schema["paths"].values():
        for operation in path.values():
            operation["security"] = [{"BearerAuth": []}]
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

"""# 사용자 토큰"""

def create_token(user_id: str):
    payload = {
        "sub": user_id,
        "exp": datetime.utcnow() + timedelta(hours=1)
    }
    return jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)

print(create_token("user1"))

"""# DB 생성"""

conn = sqlite3.connect("users.db")
cur = conn.cursor()

# users 테이블 생성
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id TEXT,
    name TEXT,
    phone TEXT
)
""")

# 사용자 하나 추가
cur.execute("""
INSERT INTO users (student_id, name, phone) VALUES (?, ?, ?)
""", ("20240001", "김민지", "01012345678"))

# 확인
cur.execute("SELECT * FROM users")
for row in cur.fetchall():
    print(row)

conn.commit()
conn.close()

"""# DB 조회"""

def get_reservation_from_db(reserve_id: int):
    conn = sqlite3.connect("reservations.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, room_id FROM reservations WHERE id = ?", (reserve_id,))
    row = cursor.fetchone()
    conn.close()

    if row:
        return {"user_id": row[0], "room_id": row[1]}
    else:
        return None

"""# 로그인"""

def get_db():
    conn = sqlite3.connect("users.db")
    conn.row_factory = sqlite3.Row
    return conn

@app.post("/login")
def login(student_id: str = Form(...), name: str = Form(...), phone: str = Form(...)):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
    SELECT * FROM users
    WHERE student_id = ? AND name = ? AND phone = ?
    """, (student_id, name, phone))
    user = cur.fetchone()

    if user:
        return {"success": True, "message": "로그인 성공"}
    else:
        return {"success": False, "message": "로그인 실패"}

"""# 강의실 정보"""



"""# 강의시간표"""



"""# 보증포인트 (보류)

- 내 포인트
"""



"""- 포인트 이력"""



"""- 포인트 설명

# 테스트용 JWT 생성기
"""

!ngrok config add-authtoken "2xY2WVmlvhaDE3oxlQE4PbG0bnL_42qcjEv2FGLFfMZUaLTQP"

import threading

from pyngrok import ngrok
import uvicorn

def run_app():
    uvicorn.run(app, host="0.0.0.0", port=8000)

thread = threading.Thread(target=run_app)
thread.start()

public_url = ngrok.connect(8000)
print("🔗 Swagger 주소:", public_url.public_url + "/docs")

"""# 데이터셋"""

user_reservations = {
    1: {
        "user_id": "user1",
        "room_id": 9,
        "start_time": "2025-05-25T10:00:00",
        "end_time": "2025-05-25T12:00:00",
        "status": "reserved"
    }
}
